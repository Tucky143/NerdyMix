import groovy.json.JsonSlurper

plugins {
    id "java"
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" } // for gradle-tooling-api
    flatDir { dirs mcreator_path + '/lib' }
}

group = 'net.tucky143.nerdy'
version = new JsonSlurper().parse(file('src/main/resources/plugin.json'))['info']['version']

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

dependencies {
    implementation(project(path: ':MCreator', configuration: 'runtimeElements'))
    project(':MCreator').afterEvaluate(() ->
            project(":MCreator").configurations.named("implementation").get().dependencies.each {
                //noinspection ForeignDelegate
                implementation it
            }
    )
    implementation fileTree(dir: 'C:/Program Files/Pylo/MCreator Source/MCreator /lib', include: ['*.jar'])
    implementation(group: 'com.google.code.gson', name: 'gson', version: '2.13.1') {
        dep -> dep.exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    }
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.25.1'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.14.0'
    implementation group: 'org.openjfx', name: 'javafx-web', version: '21.0.7'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: '21.0.7'
    implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.jetbrains:annotations:24.0.0'
}

tasks.jar {
    archiveFileName.set("nerdymix-2025.2.zip")
}

tasks.register('runMCreatorWithPlugin', JavaExec) {
    dependsOn jar

    environment("MCREATOR_PLUGINS_FOLDER", file("./build/libs"))
    environment("MCREATOR_PLUGINS_DEV", "")

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath = project(':MCreator').sourceSets.main.runtimeClasspath

    main = 'net.mcreator.Launcher'

    workingDir = mcreator_path
}

subprojects { subproject ->
    subproject.plugins.withType(JavaPlugin) {
        test {
            dependsOn rootProject.jar

            environment("MCREATOR_PLUGINS_FOLDER", new File(rootProject.projectDir, "/build/libs"))
            environment("MCREATOR_PLUGINS_DEV", "")

            workingDir = mcreator_path
        }
    }
}